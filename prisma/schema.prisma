// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement()) @map("id")
  email        String  @unique @map("email")
  password     String  @map("password")
  name         String  @map("name")
  introduce    String? @map("introduce") @db.Text
  profileImage String? @map("profile_image")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  booking      Booking[]
  refreshToken RefreshToken?
  bookmark     Bookmark[]
  review       Review[]

  @@map("users")
}

model Petsitter {
  id           Int     @id @default(autoincrement()) @map("id")
  name         String  @map("name")
  experience   Int     @default(0) @map("experience")
  email        String  @unique @map("email")
  password     String  @map("password")
  profileImage String? @map("profile_image")
  introduce    String  @default("안녕하세요.") @map("introduce")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  booking           Booking[]
  petsitterService  PetsitterService[]
  petsitterLocation PetsitterLocation[]
  review            Review[]
  bookmark          Bookmark[]

  @@map("petsitters")
}

model PetsitterService {
  id          Int         @id @default(autoincrement()) @map("id")
  petsitterId Int         @map("petsitter_id")
  animalType  AnimalType  @map("animal_type")
  serviceType ServiceType @map("service_type")
  price       Int         @default(0) @map("price")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  petsitter Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)

  @@map("petsitter_services")
}

enum AnimalType {
  DOG
  CAT
  ETC
}

enum ServiceType {
  WALK
  SHOWER
  PICKUP
  FEED
}

model PetsitterLocation {
  id          Int    @id @default(autoincrement()) @map("id")
  petsitterId Int    @map("petsitter_id")
  location    String @map("location")
  surcharge   Int    @default(0) @map("surcharge")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  petsitter Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)

  @@map("petsitter_locations")
}

model Booking {
  id          Int         @id @default(autoincrement()) @map("id")
  userId      Int         @map("user_id")
  petsitterId Int         @map("petsitter_id")
  animalType  AnimalType  @map("animal_type")
  serviceType ServiceType @map("service")
  location    String      @map("location")
  content     String?     @map("content") @db.Text //요구사항
  date        DateTime    @map("date")
  totalPrice  Int         @map("total_price")
  status      Status      @default(PENDING) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  petsitter Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

enum Status {
  REJECTED //거절
  CANCELED //취소
  PENDING //보류
  APPROVED //승인
  DONE //끝남
}

model Bookmark {
  id          Int @id @default(autoincrement()) @map("id")
  userId      Int @unique @map("user_id")
  petsitterId Int @map("petsitter_id")

  createdAt DateTime @default(now()) @map("create_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  petsitter Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}

model Review {
  id          Int    @id @default(autoincrement()) @map("id")
  userId      Int    @map("user_id")
  petsitterId Int    @map("petsitter_id")
  rating      Int    @map("rating")
  comment     String @map("comment")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  petsitter Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model RefreshToken {
  id           Int    @id @default(autoincrement()) @map("id")
  userId       Int    @unique @map("user_id")
  refreshToken String? @map("refresh_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
